"""
Django settings for imooc project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
import logging  # 终端输出所有的debug信息

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-_ih^1!q940po#@kd+beu_pvgt#9quk=yr(mw9!6^inea$939_m"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "courses",
    # "courses.apps.CoursesConfig",
    "rest_framework",  # 开发rest_framework
    "rest_framework.authtoken",  # DRF 自带的token 认证
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # 添加本地化中间件
    "django.middleware.locale.LocaleMiddleware",
]

ROOT_URLCONF = "imooc.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],  # 添加此项
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "imooc.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "imooc",
        "HOST": "127.0.0.1",
        "USER": "root",
        "PASSWORD": "123456",
        # MYSQL 5.7 及其以上版本，但是MySQL 数据库引擎设置存储引擎为 INNODB可不写
        # "OPTIONS": {"init_command": "SET default_storage_engine=InnoDB;"},
        # 如果是MySQL 5.7 以下版本
        # "OPTIONS": {
        #     "init_command": "SET default_storage_engine=InnoDB;"
        #     "SET sql_mode = 'STRICT_TRANS_TABLES';"
        #     "SET GLOBAL group_concat_max_length = 102400;"
        #     "SET charset utf-8;"
        # },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "/static/"  # Nginx部署时静态文件的目录

# 开发阶段放置静态文件的目录
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static_files"),)

STATIC_ROOT = os.path.join(
    BASE_DIR, "static"
)  # 执行python3 manage.py collectstatic命令后会将项目中的静态文件收集到static目录


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 配置日志管理信息
# the logging of project
# LOGGING = {
#     "version": 1,  # 日志级别
#     # 日志处理器
#     "handlers": {
#         "console": {
#             # 'level': 'DEBUG',
#             "class": "logging.StreamHandler",
#         }
#     },
#     # 日志管理器
#     "loggers": {
#         "django.db.backends": {
#             "handlers": ["console"],
#             "level": "DEBUG" if DEBUG else "INFO",
#             # "propagate": True,  # 是否继续传递日志信息
#         }
#     },
# }


# DRF 的全局配置
REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 50,
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.AutoSchema",
    # 格式化time
    "DATETIME_FORMAT": "%Y-%m-%d %H:%M:%S",
    # 当response返回数据对象时使用的类 --- > DRF 自带可不写
    # "DEFAULT_RENDER_CLASSES": [
    #     # 只支持元组和Json对象
    #     "rest_framework.renders.JsonRenderer",
    #     "rest_framework.renders.BrowsableAPIRenderer",
    # ],
    # 解析器 解析request中的data
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parser.JSONParser",
        "rest_framework.parser.FormParser",
        "rest_framework.parser.MultiPartParser",
    ],
    # 权限
    "DEFAULT_PERMISSIONS_CLASS": [
        # 用户登陆
        "rest_framework.permissions.isAuthenticated",
    ],
    # 认证
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # BaseAuthentication
        "rest_framework.authentication.BaseAuthentication",
        # session 认证
        "rest_framework.authentication.SessionAuthentication",
        # token 认证 ---> 需要在INSTALLED_APPS 中把drf自带的token 认证加上
        "rest_framework.authentication.TokenAuthentication",
    ],
}


# 上面写的都是对应的类
# from rest_framework import authentication, permissions, parsers,renderers

# parsers.JSONParser

# permissions.IsAuthenticated

# authentication.BaseAuthentication

# renderers.BrowsableAPIRenderer
